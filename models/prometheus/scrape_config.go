package prometheus

import (
	"github.com/prometheus/common/model"
)

// ScrapeConfig represents an item in scrape_configs section
type ScrapeConfig struct {
	// The job name assigned to scraped metrics by default.
	JobName string `json:"job_name" yaml:"job_name"`

	// How frequently to scrape targets from this job.
	ScrapeInterval model.Duration `json:"scrape_interval,omitempty" yaml:"scrape_interval,omitempty"`

	// Per-scrape timeout when scraping this job.
	ScrapeTimeout model.Duration `json:"scrape_timeout,omitempty" yaml:"scrape_timeout,omitempty"`

	// The HTTP resource path on which to fetch metrics from targets.
	// default = /metrics
	MetricsPath string `json:"metrics_path,omitempty" yaml:"metrics_path,omitempty"`

	// honor_labels controls how Prometheus handles conflicts between labels that are
	// already present in scraped data and labels that Prometheus would attach
	// server-side ("job" and "instance" labels, manually configured target
	// labels, and labels generated by service discovery implementations).
	//
	// If honor_labels is set to "true", label conflicts are resolved by keeping label
	// values from the scraped data and ignoring the conflicting server-side labels.
	//
	// If honor_labels is set to "false", label conflicts are resolved by renaming
	// conflicting labels in the scraped data to "exported_<original-label>" (for
	// example "exported_instance", "exported_job") and then attaching server-side
	// labels. This is useful for use cases such as federation, where all labels
	// specified in the target should be preserved.
	//
	// Note that any globally configured "external_labels" are unaffected by this
	// setting. In communication with external systems, they are always applied only
	// when a time series does not have a given label yet and are ignored otherwise.
	// honor_labels: <boolean> | default = false
	HonorLabels bool `json:"honor_labels,omitempty" yaml:"honor_labels,omitempty"`

	// Configures the protocol scheme used for requests.
	// [ scheme: <scheme> | default = http ]
	Scheme string `json:"scheme,omitempty" yaml:"scheme,omitempty"`

	// Optional HTTP URL parameters.
	Params map[string][]string `json:"params,omitempty" yaml:"params,omitempty"`

	// Sets the `Authorization` header on every scrape request with the
	// configured username and password.
	BasicAuth *BasicAuth `json:"basic_auth,omitempty" yaml:"basic_auth,omitempty"`

	// Sets the `Authorization` header on every scrape request with
	// the configured bearer token. It is mutually exclusive with `bearer_token_file`.
	BearerToken Secret `json:"bearer_token,omitempty" yaml:"bearer_token,omitempty"`

	// Sets the `Authorization` header on every scrape request with the bearer token
	// read from the configured file. It is mutually exclusive with `bearer_token`.
	BearerTokenFile string `json:"bearer_token_file,omitempty" yaml:"bearer_token_file,omitempty"`

	// Configures the scrape request's TLS settings.
	TLSConfig *TLSConfig `json:"tls_config,omitempty" yaml:"tls_config,omitempty"`

	// Optional proxy URL.
	ProxyURL string `json:"proxy_url,omitempty" yaml:"proxy_url,omitempty"`

	// List of Azure service discovery configurations.
	AzureSdConfigs []*AzureSdConfig `json:"azure_sd_configs,omitempty" yaml:"azure_sd_configs,omitempty"`

	// List of Consul service discovery configurations.
	ConsulSdConfigs []*ConsulSdConfig `json:"consul_sd_configs,omitempty" yaml:"consul_sd_configs,omitempty"`

	// List of DNS service discovery configurations.
	DNSSdConfigs []*DNSSdConfig `json:"dns_sd_configs,omitempty" yaml:"dns_sd_configs,omitempty"`

	// List of EC2 service discovery configurations.
	EC2SdConfigs []*EC2SdConfig `json:"ec2_sd_configs,omitempty" yaml:"ec2_sd_configs,omitempty"`

	// List of OpenStack service discovery configurations.
	OpenStackSdConfigs []*OpenStackSdConfig `json:"openstack_sd_configs,omitempty" yaml:"openstack_sd_configs,omitempty"`

	// List of file service discovery configurations.
	FileSdConfigs []*FileSdConfig `json:"file_sd_configs,omitempty" yaml:"file_sd_configs,omitempty"`

	// List of GCE service discovery configurations.
	GCESdConfigs []*GCESdConfig `json:"gce_sd_configs,omitempty" yaml:"gce_sd_configs,omitempty"`

	// List of Kubernetes service discovery configurations.
	KubernetesSdConfigs []*KubernetesSdConfig `json:"kubernetes_sd_configs,omitempty" yaml:"kubernetes_sd_configs,omitempty"`

	// List of Marathon service discovery configurations.
	MarathonSdConfigs []*MarathonSdConfig `json:"marathon_sd_configs,omitempty" yaml:"marathon_sd_configs,omitempty"`

	// List of AirBnB's Nerve service discovery configurations.
	NerveSdConfigs []*NerveSdConfig `json:"nerve_sd_configs,omitempty" yaml:"nerve_sd_configs,omitempty"`

	// List of Zookeeper Serverset service discovery configurations.
	ServersetSdConfigs []*ServersetSdConfig `json:"serverset_sd_configs,omitempty" yaml:"serverset_sd_configs,omitempty"`

	// List of Triton service discovery configurations.
	TritonSdConfigs []*TritonSdConfig `json:"triton_sd_configs,omitempty" yaml:"triton_sd_configs,omitempty"`

	// List of labeled statically configured targets for this job.
	StaticConfigs []*StaticConfig `json:"static_configs,omitempty" yaml:"static_configs,omitempty"`

	// List of target relabel configurations.
	RelabelConfigs []*RelabelConfig `json:"relabel_configs,omitempty" yaml:"relabel_configs,omitempty"`

	// List of metric relabel configurations.
	MetricRelabelConfigs []*RelabelConfig `json:"metric_relabel_configs,omitempty" yaml:"metric_relabel_configs,omitempty"`

	// Per-scrape limit on number of scraped samples that will be accepted.
	// If more than this number of samples are present after metric relabelling
	// the entire scrape will be treated as failed. 0 means no limit.
	// sample_limit: <int> | default = 0
	SampleLimit int `json:"sample_limit,omitempty" yaml:"sample_limit,omitempty"`
}

// AzureSdConfig represents azure_sd_configs
type AzureSdConfig struct {
	// The information to access the Azure API.
	// The subscription ID.
	SubscriptionID string `json:"subscription_id,omitempty" yaml:"subscription_id,omitempty"`
	// The tenant ID.
	TenantID string `json:"tenant_id,omitempty" yaml:"tenant_id,omitempty"`
	// The client ID.
	ClientID string `json:"client_id,omitempty" yaml:"client_id,omitempty"`
	// The client secret.
	ClientSecret Secret `json:"client_secret,omitempty" yaml:"client_secret,omitempty"`

	// Refresh interval to re-read the instance list.
	// default = 300s
	RefreshInterval model.Duration `json:"refresh_interval,omitempty" yaml:"refresh_intervalsample_limit,omitempty"`

	// The port to scrape metrics from. If using the public IP address, this must
	// instead be specified in the relabeling rule.
	// [ port: <int> | default = 80 ]
	Port int `json:"port,omitempty" yaml:"port,omitempty"`
}

// ConsulSdConfig represents consul_sd_configs
type ConsulSdConfig struct {
	// The information to access the Consul API. It is to be defined
	// as the Consul documentation requires.
	Server     string `json:"server,omitempty" yaml:"server,omitempty"` // default = "localhost:8500"
	Token      Secret `json:"token,omitempty" yaml:"token,omitempty"`
	Datacenter string `json:"datacenter,omitempty" yaml:"datacenter,omitempty"`
	Scheme     string `json:"scheme,omitempty" yaml:"scheme,omitempty"` // default = "http"
	Username   string `json:"username,omitempty" yaml:"username,omitempty"`
	Password   Secret `json:"password,omitempty" yaml:"password,omitempty"`

	TLSConfig *TLSConfig `json:"tls_config,omitempty" yaml:"tls_config,omitempty"`

	// A list of services for which targets are retrieved. If omitted, all services
	// are scraped.
	Services []string `json:"services,omitempty" yaml:"services,omitempty"`

	// The string by which Consul tags are joined into the tag label.
	TagSeparator string `json:"tag_separator,omitempty" yaml:"tag_separator,omitempty"` // default = ,
}

// DNSSdConfig represents dns_sd_configs
type DNSSdConfig struct {
	// A list of DNS domain names to be queried.
	Names []string `json:"names,omitempty" yaml:"names,omitempty"`

	// The type of DNS query to perform.
	Type string `json:"type,omitempty" yaml:"type,omitempty"` // default = 'SRV'

	// The port number used if the query type is not SRV.
	Port int `json:"port,omitempty" yaml:"port,omitempty"`

	// The time after which the provided names are refreshed.
	RefreshInterval model.Duration `json:"refresh_interval,omitempty" yaml:"refresh_interval,omitempty"` //default = 30s
}

// EC2SdConfig represents ec2_sd_configs
type EC2SdConfig struct {
	// The information to access the EC2 API.
	// The AWS Region.
	Region string `json:"region,omitempty" yaml:"region,omitempty"`

	// The AWS API keys. If blank, the environment variables `AWS_ACCESS_KEY_ID`
	// and `AWS_SECRET_ACCESS_KEY` are used.
	AccessKey string `json:"access_key,omitempty" yaml:"access_key,omitempty"`
	SecretKey Secret `json:"secret_key,omitempty" yaml:"secret_key,omitempty"`

	// Named AWS profile used to connect to the API.
	Profile string `json:"profile,omitempty" yaml:"profile,omitempty"`

	// AWS Role ARN, an alternative to using AWS API keys.
	RoleARN string `json:"role_arn,omitempty" yaml:"role_arn,omitempty"`

	// Refresh interval to re-read the instance list.
	RefreshInterval model.Duration `json:"refresh_interval,omitempty" yaml:"refresh_interval,omitempty"` //default = 60s

	// The port to scrape metrics from. If using the public IP address, this must
	// instead be specified in the relabeling rule.
	Port int `json:"port,omitempty" yaml:"port,omitempty"` //default = 80
}

// OpenStackSdConfig represents openstack_sd_configs
type OpenStackSdConfig struct {
	// The information to access the OpenStack API.
	// The OpenStack role of entities that should be discovered.
	Role string `json:"role,omitempty" yaml:"role,omitempty"`

	// The OpenStack Region.
	Region string `json:"region,omitempty" yaml:"region,omitempty"`

	// identity_endpoint specifies the HTTP endpoint that is required to work with
	// the Identity API of the appropriate version. While it's ultimately needed by
	// all of the identity services, it will often be populated by a provider-level
	// function.
	IdentityEndpoint string `json:"identity_endpoint,omitempty" yaml:"identity_endpoint,omitempty"`

	// username is required if using Identity V2 API. Consult with your provider's
	// control panel to discover your account's username. In Identity V3, either
	// userid or a combination of username and domain_id or domain_name are needed.
	Username string `json:"username,omitempty" yaml:"username,omitempty"`
	UserID   string `json:"userid,omitempty" yaml:"userid,omitempty"`

	// password for the Identity V2 and V3 APIs. Consult with your provider's
	// control panel to discover your account's preferred method of authentication.
	Password Secret `json:"password,omitempty" yaml:"password,omitempty"`

	// At most one of domain_id and domain_name must be provided if using username
	// with Identity V3. Otherwise, either are optional.
	DomainName string `json:"domain_name,omitempty" yaml:"domain_name,omitempty"`
	DomainID   string `json:"domain_id,omitempty" yaml:"domain_id,omitempty"`

	// The project_id and project_name fields are optional for the Identity V2 API.
	// Some providers allow you to specify a project_name instead of the project_id.
	// Some require both. Your provider's authentication policies will determine
	// how these fields influence authentication.
	ProjectName string `json:"project_name,omitempty" yaml:"project_name,omitempty"`
	ProjectID   string `json:"project_id,omitempty" yaml:"project_id,omitempty"`

	// Refresh interval to re-read the instance list.
	RefreshInterval model.Duration `json:"refresh_interval,omitempty" yaml:"refresh_interval,omitempty"` //default = 60s

	// The port to scrape metrics from. If using the public IP address, this must
	// instead be specified in the relabeling rule.
	Port int `json:"port,omitempty" yaml:"port,omitempty"` //default = 80
}

// FileSdConfig represents file_sd_configs
type FileSdConfig struct {
	// Patterns for files from which target groups are extracted.
	Files []string `json:"files,omitempty" yaml:"files,omitempty"`

	// Refresh interval to re-read the files.
	RefreshInterval model.Duration `json:"refresh_interval,omitempty" yaml:"refresh_interval,omitempty"` //default = 5m
}

// GCESdConfig represents gce_sd_configs
type GCESdConfig struct {
	// The information to access the GCE API.

	// The GCP Project
	Project string `json:"project,omitempty" yaml:"project,omitempty"`

	// The zone of the scrape targets. If you need multiple zones use multiple
	// gce_sd_configs.
	Zone string `json:"zone,omitempty" yaml:"zone,omitempty"`

	// Filter can be used optionally to filter the instance list by other criteria
	// Syntax of this filter string is described here in the filter query parameter section:
	// https://cloud.google.com/compute/docs/reference/latest/instances/list
	Filter string `json:"filter,omitempty" yaml:"filter,omitempty"`

	// Refresh interval to re-read the instance list
	RefreshInterval model.Duration `json:"refresh_interval,omitempty" yaml:"refresh_interval,omitempty"` //default = 60s

	// The port to scrape metrics from. If using the public IP address, this must
	// instead be specified in the relabeling rule.
	Port int `json:"port,omitempty" yaml:"port,omitempty"` //default = 80

	// The tag separator is used to separate the tags on concatenation
	TagSeparator string `json:"tag_separator,omitempty" yaml:"tag_separator,omitempty"` // default = ,
}

// KubernetesSdConfig represents kubernetes_sd_configs
type KubernetesSdConfig struct {
	// The information to access the Kubernetes API.

	// The API server addresses. If left empty, Prometheus is assumed to run inside
	// of the cluster and will discover API servers automatically and use the pod's
	// CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.
	APIServer string `json:"api_server,omitempty" yaml:"api_server,omitempty"`

	// The Kubernetes role of entities that should be discovered.
	Role string `json:"role,omitempty" yaml:"role,omitempty"`

	// Optional authentication information used to authenticate to the API server.
	// Note that `basic_auth`, `bearer_token` and `bearer_token_file` options are
	// mutually exclusive.

	// Optional HTTP basic authentication information.
	BasicAuth *BasicAuth `json:"basic_auth,omitempty" yaml:"basic_auth,omitempty"`

	// Optional bearer token authentication information.
	BearerToken Secret `json:"bearer_token,omitempty" yaml:"bearer_token,omitempty"`

	// Optional bearer token file authentication information.
	BearerTokenFile string `json:"bearer_token_file,omitempty" yaml:"bearer_token_file,omitempty"`

	// TLS configuration.
	TLSConfig *TLSConfig `json:"tls_config,omitempty" yaml:"tls_config,omitempty"`

	// Optional namespace discovery. If omitted, all namespaces are used.
	Namespaces Namespaces `json:"namespaces,omitempty" yaml:"namespaces,omitempty"`
}

// Namespaces represents k8s namespaces
type Namespaces struct {
	Names []string `json:"names,omitempty" yaml:"names,omitempty"`
}

// MarathonSdConfig represents marathon_sd_configs
type MarathonSdConfig struct {
	// List of URLs to be used to contact Marathon servers.
	// You need to provide at least one server URL.
	Servers []string `json:"servers,omitempty" yaml:"servers,omitempty"`

	// Optional bearer token authentication information.
	// It is mutually exclusive with `bearer_token_file`.
	BearerToken Secret `json:"bearer_token,omitempty" yaml:"bearer_token,omitempty"`

	// Optional bearer token file authentication information.
	// It is mutually exclusive with `bearer_token`.
	BearerTokenFile string `json:"bearer_token_file,omitempty" yaml:"bearer_token_file,omitempty"`

	// Polling interval
	RefreshInterval model.Duration `json:"refresh_interval,omitempty" yaml:"refresh_intervalsample_limit,omitempty"` // default = 30s
}

// NerveSdConfig represents nerve_sd_configs
type NerveSdConfig struct {
	// The Zookeeper servers.
	Servers []string `json:"servers,omitempty" yaml:"servers,omitempty"`
	// Paths can point to a single service, or the root of a tree of services.
	Paths []string `json:"paths,omitempty" yaml:"paths,omitempty"`

	Timeout model.Duration `json:"timeout,omitempty" yaml:"timeout,omitempty"` // default = 10s
}

// ServersetSdConfig represents serverset_sd_configs
type ServersetSdConfig struct {
	// The Zookeeper servers.
	Servers []string `json:"servers,omitempty" yaml:"servers,omitempty"`
	// Paths can point to a single service, or the root of a tree of services.
	Paths []string `json:"paths,omitempty" yaml:"paths,omitempty"`

	Timeout model.Duration `json:"timeout,omitempty" yaml:"timeout,omitempty"` // default = 10s
}

// TritonSdConfig represents triton_sd_configs
type TritonSdConfig struct {
	// The information to access the Triton discovery API.

	// The account to use for discovering new target containers.
	Account string `json:"account,omitempty" yaml:"account,omitempty"`

	// The DNS suffix which should be applied to target containers.
	DNSSuffix string `json:"dns_suffix,omitempty" yaml:"dns_suffix,omitempty"`

	// The Triton discovery endpoint (e.g. 'cmon.us-east-3b.triton.zone'). This is
	// often the same value as dns_suffix.
	Endpoint string `json:"endpoint,omitempty" yaml:"endpoint,omitempty"`

	// The port to use for discovery and metric scraping.
	Port int `json:"port,omitempty" yaml:"port,omitempty"` // default = 9163

	// The interval which should should be used for refreshing target containers.
	RefreshInterval model.Duration `json:"refresh_interval,omitempty" yaml:"refresh_intervalsample_limit,omitempty"` // default = 60s

	// The Triton discovery API version.
	Version int `json:"version,omitempty" yaml:"version,omitempty"` // default = 1

	// TLS configuration.
	TLSConfig *TLSConfig `json:"tls_config,omitempty" yaml:"tls_config,omitempty"`
}
